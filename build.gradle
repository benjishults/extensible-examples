buildscript {
    ext.kotlin_version = "$kotlinVersion"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.28.0"
}

apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'groovy'
apply plugin: 'com.github.johnrengelman.shadow'

group 'com.benjishults'

repositories {
    mavenLocal()
    jcenter()
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}

mainClassName = "com.benjishults.exteg.MainKt"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}

compileTestGroovy {
    dependsOn(compileTestJava)
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
}

dependencies {

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutines"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "io.vertx:vertx-circuit-breaker:$vertxVersion"
    implementation "io.vertx:vertx-core:$vertxVersion"
    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
    implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"
    implementation "io.vertx:vertx-config:$vertxVersion"
    implementation "io.vertx:vertx-web-client:$vertxVersion"

    implementation "ch.qos.logback:logback-classic:$logbackVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"

    testImplementation "org.spockframework:spock-core:$spockVersion"
}

shadowJar {
    baseName = project.name
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude "**/logback-test.xml"
}

applicationDefaultJvmArgs = [
        "-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory"
]

spotless {
    format 'misc', {
        target fileTree(projectDir) {
            include '**/*.md', '**/.gitignore'
            exclude 'build/**', '.gradle/**'
        }

        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        target fileTree(projectDir) {
            include '**/*.java'
            exclude 'build/**', '.gradle/**'
        }
        googleJavaFormat()
        // optional: you can specify a specific version and/or switch to AOSP style
        removeUnusedImports() // removes any unused imports
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    groovy {
        target fileTree(projectDir) {
            include '**/*.groovy', '**/*.gradle'
            exclude 'build/**', '.gradle/**', 'build.gradle', 'src/test/**' // until we figure out how to keep Spock tables formatted
        }
        paddedCell() // Avoid cyclic ambiguities
        // the Groovy Eclipse formatter extends the Java Eclipse formatter,
        // so it formats Java files by default (unless `excludeJava` is used).
        greclipse() // .configFile('greclipse.properties')
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    kotlin {
        target fileTree(projectDir) {
            include '**/*.kts', '**/*.kt'
            exclude 'build/**', '.gradle/**'
        }
        // optionally takes a version
        // Optional user arguments can be set
        ktlint().userData(['disabled_rules': 'no-blank-line-before-rbrace'])
    }
    scala {
        // optional: you can specify a specific version or config file
        scalafmt() // .configFile('scalafmt.conf')
    }
    typescript {
        target fileTree(projectDir) {
            include '**/*.ts'
            exclude 'build/**', '.gradle/**'
        }
        prettier()
    }
    format 'styling', {
        target fileTree(projectDir) {
            include '**/*.css', '**/*.scss'
            exclude 'build/**', '.gradle/**'
        }
        // or provide both (config options take precedence over configFile options)
        prettier() // .config(['parser': 'postcss']).configFile('path-to/.prettierrc.yml')
    }
    format 'javascript', {
        target fileTree(projectDir) {
            include '**/*.js'
            exclude 'build/**', '.gradle/**'
        }
        prettier() // .config(['filepath': 'file.js'])
    }
    sql {
        target fileTree(projectDir) {
            include '**/*.sql'
            exclude 'build/**', '.gradle/**'
        }
        // configFile is optional, arguments available here: https://github.com/diffplug/spotless/blob/master/lib/src/main/java/com/diffplug/spotless/sql/dbeaver/DBeaverSQLFormatterConfiguration.java
        dbeaver() // .configFile('dbeaver.props')
    }

}

build.dependsOn 'spotlessApply'
